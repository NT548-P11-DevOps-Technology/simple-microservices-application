name: CI Pipeline
on:
  push:
    branches:
      - main
      - stage
  pull_request:
    branches:
      - main
      - stage

jobs:
  sonar_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=devops
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.java,**/node_modules/**,**/*.json
            -Dsonar.language=js,ts
            -Dsonar.sourceEncoding=UTF-8

  build_and_push:
    needs: sonar_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive 
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker
        uses: docker/setup-qemu-action@v2
      
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: ${{ secrets.HARBOR_REGISTRY }}
      
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "PROJECT=production" >> $GITHUB_ENV
            echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/stage" ]]; then
            echo "PROJECT=staging" >> $GITHUB_ENV
            echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          fi
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      
      - name: Build and push Docker images
        run: |
          # Define services
          services=("FE" "auth-service" "class-service" "lecturer-service" "student-service")
          
          for service in "${services[@]}"; do
            service_lowercase=$(echo $service | tr '[:upper:]' '[:lower:]')
            # Build image name with project prefix
            image_name="${{ secrets.HARBOR_REGISTRY }}/class-management/${PROJECT}/${service_lowercase}"
            
            # Build Dockerfile path
            dockerfile_path="./class-management-${service}/Dockerfile"
            
            # Build image
            echo "Building $image_name..."
            docker build \
              -t ${image_name}:${DOCKER_TAG} \
              -t ${image_name}:${COMMIT_SHA} \
              --build-arg ENV=${PROJECT} \
              -f ${dockerfile_path} .
            
            # Push images
            echo "Pushing $image_name..."
            docker push ${image_name}:${DOCKER_TAG}
            docker push ${image_name}:${COMMIT_SHA}
          done
