name: CI Pipeline
on:
  push:
    branches:
      - main
      - stage
  pull_request:
    branches:
      - main
      - stage
jobs:
  sonar_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=devops
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.java,**/node_modules/**,**/*.json
            -Dsonar.language=js,ts
            -Dsonar.sourceEncoding=UTF-8
  
  build_and_push:
    needs: sonar_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive 
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker
        uses: docker/setup-qemu-action@v2
      
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: ${{ secrets.HARBOR_REGISTRY }}
      
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "PROJECT=production" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/stage" ]]; then
            echo "PROJECT=staging" >> $GITHUB_ENV
          fi
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      
      - name: Build Docker Compose Services
        run: |
          docker-compose build
      
      - name: Push Docker Images
        run: |
          # Services to push
          services=(
            "class-mangement-fe"
            "class-mangement-auth-service"
            "class-management-student-service"
            "class-management-lecturer-service"
            "class-management-class-service"
          )
          
          for service in "${services[@]}"; do
            # Construct image name
            image_name="${PROJECT}/class-management-${service#*-}"
            
            # Tag images
            docker tag $service $image_name:$COMMIT_SHA
            
            # Push image
            docker push $image_name:$COMMIT_SHA
          done
